<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
 xmlns:context="http://www.springframework.org/schema/context"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd ">

<!-- This is the main Spring Framework configuration file.  It works in conjunction with 
spring-mvc-servlet.xml to configure Spring-configured objects (beans).  
applicationContext.xml is the default file loaded by org.springframework.web.context.ContextLoaderListener.  
To split configuration across multiple spring files, consult web.xml -->

    <!-- Scan classes with annotations for spring bean definitions
    see: http://matthiaswessendorf.wordpress.com/2010/04/17/spring-3-0-and-jsr-330-part/
    and: http://richardchesterwood.blogspot.com/2011/03/using-sessions-in-spring-mvc-including.html
    -->
    <context:component-scan base-package="com.scandilabs.www.service" />

    <!-- Load environment-specific properties such as database ports and passwords -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        
        <!-- This setting allows us to override properties with JVM system properties OR host OS system properties -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        
        <!-- Location of property file(s) -->
        <property name="locations">
            <list>
                <value>
                    file:///catamaran/apps/scandilabs-com/conf/application.properties
                </value>
            </list>
        </property>
    </bean>
    
    <!-- begin 'manually' declared beans (i.e. ones that don't use the @Component annotation) -->
    <bean id="applicationConfiguration"
        class="com.scandilabs.www.service.ApplicationConfiguration">
        <property name="tutorialFileOverridePath" value="${tutorial.file.classpath.override}" />
        <property name="wordpressUser" value="${wordpress.user}" />
        <property name="wordpressPassword" value="${wordpress.password}" />
    </bean>
    
    <bean id="solrService"
     class="com.scandilabs.www.service.SolrService">
        <constructor-arg ref="solrServerConfig"/>
    </bean>
    
    <bean id="solrServerConfig" class="com.scandilabs.framework.solr.SolrServerConfig" init-method="init">
        <property name="solrHost" value="${solr.host}" />
        <property name="solrPort" value="${solr.port}"/>
    </bean>

    <bean id="faqSolrServiceSetter"  
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">    
            <value>com.scandilabs.www.entity.Faq.setSolrService</value>  
        </property>  
        <property name="arguments">    
            <list>      
                <ref bean="solrService"/>    
            </list>  
        </property>
    </bean>    

    <bean id="userContextSolrServiceSetter"  
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">    
            <value>com.scandilabs.www.service.UserContext.setSolrService</value>  
        </property>  
        <property name="arguments">    
            <list>      
                <ref bean="solrService"/>    
            </list>  
        </property>
    </bean>    
    
    <bean id="springMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host">
          <value>smtp.gmail.com</value>
        </property>
        <property name="port">
          <value>465</value>
        </property> 
        <property name="protocol">
          <value>smtps</value>
        </property> 
        <property name="username">
          <value>${email.send.username}</value>
        </property> 
        <property name="password">
          <value>${email.send.password}</value>
        </property> 
        <property name="javaMailProperties">
          <props>
            <prop key="mail.smtps.auth">true</prop>
            <prop key="mail.smtps.starttls.enable">true</prop>
            <prop key="mail.smtps.debug">true</prop>
          </props>
        </property> 
    </bean>
        
      <!-- A service that wraps the Spring/Java mail sender to allow for sending html-formatted emails with minimal coding -->
      <bean id="htmlMailSender" class="com.scandilabs.catamaran.mail.send.SimpleHtmlMailSender">
        <constructor-arg ref="springMailSender" />
        <property name="defaultFrom" value="domainadmin@scandilabs.com"/>
        <property name="defaultTo" value="mkvalsvik@scandilabs.com"/>
        <property name="testMode" value="false"/>
      </bean>    
    
    <!-- end 'manually' declared beans (i.e. ones that don't use the @Component annotation) -->

</beans>
